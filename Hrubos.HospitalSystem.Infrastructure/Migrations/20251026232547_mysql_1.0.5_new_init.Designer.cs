// <auto-generated />
using System;
using Hrubos.HospitalSystem.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hrubos.HospitalSystem.Infrastructure.Migrations
{
    [DbContext(typeof(HospitalSystemDbContext))]
    [Migration("20251026232547_mysql_1.0.5_new_init")]
    partial class mysql_105_new_init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Hrubos.HospitalSystem.Domain.Entities.DoctorPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("DoctorPatient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 2,
                            PatientId = 6
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 3,
                            PatientId = 7
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 4,
                            PatientId = 8
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 2,
                            PatientId = 8
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 5,
                            PatientId = 7
                        });
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Domain.Entities.Examination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("ExaminationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ExaminationTypeId");

                    b.HasIndex("PatientId");

                    b.ToTable("Examination");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTime = new DateTime(2025, 10, 17, 0, 25, 46, 825, DateTimeKind.Local).AddTicks(2667),
                            DoctorId = 2,
                            ExaminationTypeId = 1,
                            Notes = "Kontrola tlaku",
                            PatientId = 6
                        },
                        new
                        {
                            Id = 2,
                            DateTime = new DateTime(2025, 10, 22, 0, 25, 46, 826, DateTimeKind.Local).AddTicks(5066),
                            DoctorId = 3,
                            ExaminationTypeId = 3,
                            Notes = "Krevní test",
                            PatientId = 7
                        },
                        new
                        {
                            Id = 3,
                            DateTime = new DateTime(2025, 10, 25, 0, 25, 46, 826, DateTimeKind.Local).AddTicks(5080),
                            DoctorId = 4,
                            ExaminationTypeId = 2,
                            Notes = "Vyšetření kloubů",
                            PatientId = 8
                        },
                        new
                        {
                            Id = 4,
                            DateTime = new DateTime(2025, 10, 19, 0, 25, 46, 826, DateTimeKind.Local).AddTicks(5082),
                            DoctorId = 4,
                            ExaminationTypeId = 2,
                            Notes = "Vyšetření ruky",
                            PatientId = 7
                        });
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Domain.Entities.ExaminationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ExaminationId")
                        .HasColumnType("int");

                    b.Property<string>("Values")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId")
                        .IsUnique();

                    b.ToTable("ExaminationResult");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "vše v pořádku",
                            ExaminationId = 1,
                            Values = "TK: 120/80, Puls: 72"
                        },
                        new
                        {
                            Id = 2,
                            Description = "lehká anémie",
                            ExaminationId = 2,
                            Values = "Hemoglobin: 110 g/l, Hct: 33%"
                        },
                        new
                        {
                            Id = 3,
                            Attachment = "cloub_knee_xray.jpg",
                            Description = "artritida kolene",
                            ExaminationId = 3,
                            Values = "RTG: mírná artritida, rentgenový snímek v příloze"
                        });
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Domain.Entities.ExaminationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id");

                    b.ToTable("ExaminationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Obvodní vyšetření"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Specialistické vyšetření"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Laboratorní test"
                        });
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Domain.Entities.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Specialization");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Oftalmologie"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chirurgie"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pediatrie"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kardiologie"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Pneumologie"
                        });
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Domain.Entities.Vaccination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("NextDose")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("VaccineTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("VaccineTypeId");

                    b.ToTable("Vaccination");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTime = new DateTime(2024, 10, 27, 0, 25, 46, 826, DateTimeKind.Local).AddTicks(9588),
                            NextDose = new DateTime(2026, 4, 27, 0, 25, 46, 826, DateTimeKind.Local).AddTicks(9733),
                            PatientId = 6,
                            VaccineTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateTime = new DateTime(2025, 2, 27, 0, 25, 46, 827, DateTimeKind.Local).AddTicks(57),
                            NextDose = new DateTime(2026, 2, 27, 0, 25, 46, 827, DateTimeKind.Local).AddTicks(60),
                            PatientId = 7,
                            VaccineTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateTime = new DateTime(2025, 4, 27, 0, 25, 46, 827, DateTimeKind.Local).AddTicks(62),
                            NextDose = new DateTime(2026, 4, 27, 0, 25, 46, 827, DateTimeKind.Local).AddTicks(63),
                            PatientId = 8,
                            VaccineTypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateTime = new DateTime(2025, 7, 27, 0, 25, 46, 827, DateTimeKind.Local).AddTicks(64),
                            NextDose = new DateTime(2026, 10, 27, 0, 25, 46, 827, DateTimeKind.Local).AddTicks(65),
                            PatientId = 6,
                            VaccineTypeId = 2
                        });
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Domain.Entities.VaccineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id");

                    b.ToTable("VaccineType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chřipka"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hepatitida B"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tetanus"
                        });
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Infrastructure.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "9cf14c2c-19e7-40d6-b744-8917505c3106",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "be0efcde-9d0a-461d-8eb6-444b043d6660",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "29dafca7-cd20-4cd9-a3dd-4779d7bac3ee",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Infrastructure.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BirthNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int?>("SpecializationId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SpecializationId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7f9499d-dc35-4df8-af69-01c324f7978f",
                            Email = "admin@admin.cz",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Martin",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@ADMIN.CZ",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEC4prnSMIdRUykdd65G87+g3lLCc9cqJ/re6T1TsQFv5xlMrmVIe4k7yMQiEYWpH3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b2c649c54f645ce87d0a5bab2300bc2",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cde480e0-53be-40de-a746-f71e19c3e968",
                            Email = "jan.novak@nemocnice.cz",
                            EmailConfirmed = true,
                            FirstName = "Jan",
                            LastName = "Novák",
                            LockoutEnabled = true,
                            NormalizedEmail = "JAN.NOVAK@NEMOCNICE.CZ",
                            NormalizedUserName = "DOCTOR1",
                            PasswordHash = "AQAAAAEAACcQAAAAECxrKr4YAVakrkIYFy7MgUA11ryq0Sgun00+cj9FnR6EHzH8EL9WRc3J60f5x2nv0g==",
                            PhoneNumber = "111222333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6fd7297ae8f04872a9eda6314c038ae0",
                            SpecializationId = 1,
                            TwoFactorEnabled = false,
                            UserName = "doctor1"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33d5e71a-cd55-4e64-9531-9961f7ab18e0",
                            Email = "petr.svoboda@nemocnice.cz",
                            EmailConfirmed = true,
                            FirstName = "Petr",
                            LastName = "Svoboda",
                            LockoutEnabled = true,
                            NormalizedEmail = "PETR.SVOBODA@NEMOCNICE.CZ",
                            NormalizedUserName = "DOCTOR2",
                            PasswordHash = "AQAAAAEAACcQAAAAEK4DkND+5IwQiNI01DelkSwKPGQnzZAxCmobmvF3J0w5Xr6YO4bUtzjJwe2qRzUv7g==",
                            PhoneNumber = "222333444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "88ba44dd5e8a422bb15f5293689aa2e5",
                            SpecializationId = 2,
                            TwoFactorEnabled = false,
                            UserName = "doctor2"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0aee65b-b82e-44a5-954a-0b1737af0ee9",
                            Email = "lucie.dvorakova@nemocnice.cz",
                            EmailConfirmed = true,
                            FirstName = "Lucie",
                            LastName = "Dvořáková",
                            LockoutEnabled = true,
                            NormalizedEmail = "LUCIE.DVORAKOVA@NEMOCNICE.CZ",
                            NormalizedUserName = "DOCTOR3",
                            PasswordHash = "AQAAAAEAACcQAAAAEMK02V+4Wdm0lgraNwSBHPhhYUFmVpoCrp103XwzNXTFK6/s8xx0AAdpsd2G2KquQQ==",
                            PhoneNumber = "333444555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f2ba195e9c142e9974a379026eedfea",
                            SpecializationId = 3,
                            TwoFactorEnabled = false,
                            UserName = "doctor3"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "520a35d8-69c8-4821-8b97-7dc9f18ad3e1",
                            Email = "arnost.patek@nemocnice.cz",
                            EmailConfirmed = true,
                            FirstName = "Arnošt",
                            LastName = "Pátek",
                            LockoutEnabled = true,
                            NormalizedEmail = "ARNOST.PATEK@NEMOCNICE.CZ",
                            NormalizedUserName = "DOCTOR4",
                            PasswordHash = "AQAAAAEAACcQAAAAEGrcdYyAHwCXTbk9VS3VItkcEq4bhgiPBFetA8rLbp/6Asw87PI2TqWE5csu8u6TDA==",
                            PhoneNumber = "444555666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9786a9a09e6243ceb14f661a42154e5d",
                            SpecializationId = 2,
                            TwoFactorEnabled = false,
                            UserName = "doctor4"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            BirthNumber = "900101/1234",
                            ConcurrencyStamp = "247da5bc-c59f-40ef-b0ba-938430c9148f",
                            Email = "tomas.horak@email.cz",
                            EmailConfirmed = true,
                            FirstName = "Tomáš",
                            LastName = "Horák",
                            LockoutEnabled = true,
                            NormalizedEmail = "TOMAS.HORAK@EMAIL.CZ",
                            NormalizedUserName = "PACIENT1",
                            PasswordHash = "AQAAAAEAACcQAAAAEBacwHfAQ8oysuC+yEOFP2TakEie2+73wHf89V+TJX+Ioy5NfCTZkS0U/P5kN7yjmg==",
                            PhoneNumber = "601111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7e47fba95c6b4e8f8db372a876ece98f",
                            TwoFactorEnabled = false,
                            UserName = "patient1"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            BirthNumber = "950202/2345",
                            ConcurrencyStamp = "8c6587d2-d464-46d9-828f-ef566c7c6c0a",
                            Email = "anna.mala@email.cz",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            LastName = "Malá",
                            LockoutEnabled = true,
                            NormalizedEmail = "ANNA.MALA@EMAIL.CZ",
                            NormalizedUserName = "PACIENT2",
                            PasswordHash = "AQAAAAEAACcQAAAAEK31Pd3GzmAcXrVtoSezhRdeqGp0l5c6Zl0IjUvn6vAeslrjG7bgOuN4jHqQBRDbZA==",
                            PhoneNumber = "602222222",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01fc56ad197349e5a5f8a5605cec8dda",
                            TwoFactorEnabled = false,
                            UserName = "patient2"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            BirthNumber = "880303/3456",
                            ConcurrencyStamp = "e3527a4a-3b21-4daf-8eb1-4e69fe8a6d18",
                            Email = "karel.novotny@email.cz",
                            EmailConfirmed = true,
                            FirstName = "Karel",
                            LastName = "Novotný",
                            LockoutEnabled = true,
                            NormalizedEmail = "KAREL.NOVOTNY@EMAIL.CZ",
                            NormalizedUserName = "PACIENT3",
                            PasswordHash = "AQAAAAEAACcQAAAAEGDwHucn5uWF1684moFrwbqoaym+z0IHUiN+/EDQnXgz6HiEbGnaqFT136phybDc4g==",
                            PhoneNumber = "603333333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41d7fba66015490dae07df08701ee4ca",
                            TwoFactorEnabled = false,
                            UserName = "patient3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Domain.Entities.DoctorPatient", b =>
                {
                    b.HasOne("Hrubos.HospitalSystem.Infrastructure.Identity.User", "Doctor")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hrubos.HospitalSystem.Infrastructure.Identity.User", "Patient")
                        .WithMany("PatientDoctors")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Domain.Entities.Examination", b =>
                {
                    b.HasOne("Hrubos.HospitalSystem.Infrastructure.Identity.User", "Doctor")
                        .WithMany("DoctorExaminations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hrubos.HospitalSystem.Domain.Entities.ExaminationType", "ExaminationType")
                        .WithMany("Examinations")
                        .HasForeignKey("ExaminationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hrubos.HospitalSystem.Infrastructure.Identity.User", "Patient")
                        .WithMany("PatientExaminations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("ExaminationType");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Domain.Entities.ExaminationResult", b =>
                {
                    b.HasOne("Hrubos.HospitalSystem.Domain.Entities.Examination", "Examination")
                        .WithOne("Result")
                        .HasForeignKey("Hrubos.HospitalSystem.Domain.Entities.ExaminationResult", "ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examination");
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Domain.Entities.Vaccination", b =>
                {
                    b.HasOne("Hrubos.HospitalSystem.Infrastructure.Identity.User", "Patient")
                        .WithMany("Vaccinations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hrubos.HospitalSystem.Domain.Entities.VaccineType", "VaccineType")
                        .WithMany("Vaccinations")
                        .HasForeignKey("VaccineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("VaccineType");
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Infrastructure.Identity.User", b =>
                {
                    b.HasOne("Hrubos.HospitalSystem.Domain.Entities.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Hrubos.HospitalSystem.Infrastructure.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Hrubos.HospitalSystem.Infrastructure.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Hrubos.HospitalSystem.Infrastructure.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Hrubos.HospitalSystem.Infrastructure.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hrubos.HospitalSystem.Infrastructure.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Hrubos.HospitalSystem.Infrastructure.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Domain.Entities.Examination", b =>
                {
                    b.Navigation("Result");
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Domain.Entities.ExaminationType", b =>
                {
                    b.Navigation("Examinations");
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Domain.Entities.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Domain.Entities.VaccineType", b =>
                {
                    b.Navigation("Vaccinations");
                });

            modelBuilder.Entity("Hrubos.HospitalSystem.Infrastructure.Identity.User", b =>
                {
                    b.Navigation("DoctorExaminations");

                    b.Navigation("DoctorPatients");

                    b.Navigation("PatientDoctors");

                    b.Navigation("PatientExaminations");

                    b.Navigation("Vaccinations");
                });
#pragma warning restore 612, 618
        }
    }
}
